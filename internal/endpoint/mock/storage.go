// Code generated by MockGen. DO NOT EDIT.
// Source: ../storage/storage.go

// Package endpoint_test is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entities "github.com/tmvrus/json-api/internal/entities"
)

// MockBalanceStorage is a mock of BalanceStorage interface
type MockBalanceStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceStorageMockRecorder
}

// MockBalanceStorageMockRecorder is the mock recorder for MockBalanceStorage
type MockBalanceStorageMockRecorder struct {
	mock *MockBalanceStorage
}

// NewMockBalanceStorage creates a new mock instance
func NewMockBalanceStorage(ctrl *gomock.Controller) *MockBalanceStorage {
	mock := &MockBalanceStorage{ctrl: ctrl}
	mock.recorder = &MockBalanceStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBalanceStorage) EXPECT() *MockBalanceStorageMockRecorder {
	return m.recorder
}

// GetBalance mocks base method
func (m *MockBalanceStorage) GetBalance(ctx context.Context, r entities.BalanceRequest) (entities.BalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, r)
	ret0, _ := ret[0].(entities.BalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockBalanceStorageMockRecorder) GetBalance(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockBalanceStorage)(nil).GetBalance), ctx, r)
}

// RollbackTransaction mocks base method
func (m *MockBalanceStorage) RollbackTransaction(arg0 context.Context, txRef string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTransaction", arg0, txRef)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTransaction indicates an expected call of RollbackTransaction
func (mr *MockBalanceStorageMockRecorder) RollbackTransaction(arg0, txRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTransaction", reflect.TypeOf((*MockBalanceStorage)(nil).RollbackTransaction), arg0, txRef)
}

// WithdrawAndDeposit mocks base method
func (m *MockBalanceStorage) WithdrawAndDeposit(arg0 context.Context, r entities.WithdrawAndDepositRequest) (entities.WithdrawAndDepositResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawAndDeposit", arg0, r)
	ret0, _ := ret[0].(entities.WithdrawAndDepositResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithdrawAndDeposit indicates an expected call of WithdrawAndDeposit
func (mr *MockBalanceStorageMockRecorder) WithdrawAndDeposit(arg0, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawAndDeposit", reflect.TypeOf((*MockBalanceStorage)(nil).WithdrawAndDeposit), arg0, r)
}
